---
description: なぞりプロジェクト全体に適用されるCursor AIの動作を定義します。
globs: *
alwaysApply: true
---
# なぞりプロジェクト - メインルール

## 参照ルール

```reference
@file .cursor/rules/coding.mdc
@file .cursor/rules/typescript.mdc
@file .cursor/rules/react.mdc
@file .cursor/rules/japanese.mdc
@file .cursor/rules/canvas.mdc
```

## プロジェクト概要

「なぞり」は、Next.jsとTypeScriptを使用した手書きの絵や文字を描くためのシンプルなウェブアプリケーションです。HTML5 Canvasを使用してペン、マウス、タッチによる入力を受け付け、直感的な描画体験を提供します。

### 対象ユーザー

- 3〜12 歳の子供（ボリュームゾーンは 4 歳）
- 利用端末はタッチデバイス
- ユーザーはなぞりを通して、書くことと描くことを楽しむ
- 楽しみながら続け、続けることで上達した達成感を得る
- 上達したらなぞりではなく、白紙に書くことを楽しむ

## 開発スタイル

- 一人開発を前提としたプロジェクト
- UIは幼児が使用することを前提として、シンプルで直感的な操作性を重視
- コードは保守性を重視
- パフォーマンスとアクセシビリティを考慮した実装

## AIの応答スタイル

- モジュールを追加するとき、 packages.json にすでに install されていないか確認する
- 簡潔で明確な日本語での応答
- コード例を提示する際は具体的で実行可能なものを優先
- ベストプラクティスに基づく提案
- 過度に理論的な説明よりも実用的なアドバイスを優先
- 複雑な概念は具体例と合わせて説明
- 不明点がある場合は質問し、勝手に判断しない

## AI向けドキュメントの更新

メモリバンクの更新は以下の場合に行われます：

1. 新しいプロジェクトパターンの発見時
2. 重要な変更を実装した後
3. コンテキストの明確化が必要な場合

### AI向けドキュメントに記録すべき内容

- 重要な実装パス
- ユーザーの好みとワークフロー
- プロジェクト固有のパターン
- 既知の課題
- プロジェクト決定の進化
- ツール使用パターン

## コーディング時の注意点

- SOLID の原則を厳守する
- コード中の自明なコメントは避ける。コメントは必ず英語で書く
- モジュールを追加するとき、 packages.json にすでに install されていないか確認する
- プロジェクト内の既存のコードスタイルに合わせる
- パフォーマンスのボトルネックになる実装を避ける
- ビルドやリンターエラーを引き起こさないコードを提案する
- 過度な複雑さを避け、必要十分な実装を心がける

## 文書作成時の注意点

- 技術的な説明は平易な日本語を心がける
- 専門用語を使用する場合は必要に応じて解説を加える
- 箇条書きや見出しを適切に使用して読みやすさを確保する
- 図やダイアグラムが有効な場合は使用することを提案する
- 各ドキュメントの目的と対象読者を明確にする

## ベストプラクティスの適用

- Next.jsの最新機能（App Router, Server Components）を活用
- Reactパターンとアンチパターンを理解した提案
  - React Compiler を使用しているため useCallback や useMemo などのキャッシュ戦略は不要
