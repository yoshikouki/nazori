---
description: TypeScriptの型定義や使用方法に関する規約を定義します。
globs: **/*.{ts,tsx}
alwaysApply: false
---
# TypeScript規約

## 原則

- SOLID の原則を絶対とする

## 関数型アプローチ (FP)

- 純粋関数を優先
- 不変データ構造を使用
- 副作用を分離
- 型安全性を確保

## 型定義の基本原則

- `any`型の使用は禁止。具体的な型を使用する
- 型定義はエクスポートして再利用できるようにする
- 関数の引数と戻り値には明示的に型を指定する

```typescript
// Good
function calculateTotal(items: CartItem[]): number {
  return items.reduce((total, item) => total + item.price * item.quantity, 0);
}

// Bad
function calculateTotal(items: any): any {
  return items.reduce((total, item) => total + item.price * item.quantity, 0);
}
```

## インターフェースと型エイリアス

- 命名規則はパスカルケース（例：`LineStyle`）を使用する

```typescript
// インターフェースの例（拡張可能）
interface DrawingStyle {
  color: string;
  lineWidth: number;
  opacity: number;
}

// 拡張の例
interface EraseDrawingStyle extends DrawingStyle {
  isEraser: boolean;
}

// 型エイリアスの例（単純な型の組み合わせ）
type Point = {
  x: number;
  y: number;
};

type DrawingMode = 'pen' | 'eraser' | 'highlighter';
```

## 型安全性の確保

- 型安全の確保には zod を使用する
- `null`や`undefined`の可能性がある値は適切に処理する
- オプショナルチェイニング（`?.`）とnullish結合演算子（`??`）を活用する

```typescript
// オプショナルチェイニングの例
const width = canvasRef.current?.width ?? 0;

// 型ガードの例
function isPoint(value: unknown): value is Point {
  return (
    typeof value === 'object' &&
    value !== null &&
    'x' in value &&
    'y' in value &&
    typeof value.x === 'number' &&
    typeof value.y === 'number'
  );
}
```
