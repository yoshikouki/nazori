---
description: このルールは、TypeScriptの型定義や使用方法に関する規約を定義します。
globs: *.ts,*.tsx
alwaysApply: false
---
# TypeScript

## 型定義の基本原則

- `any`型の使用は避け、具体的な型を使用する
- ジェネリック型は必要な場合のみ使用し、過度に複雑にしない
- 型定義はエクスポートして再利用できるようにする
- 関数の引数と戻り値には明示的に型を指定する

## インターフェースと型エイリアス

- 拡張が必要な型にはインターフェース（`interface`）を使用する
- 単純な型の組み合わせには型エイリアス（`type`）を使用する
- 命名規則はパスカルケース（例：`LineStyle`）を使用する
- 関連する型はグループ化してひとつのファイルに定義する

## React固有の型定義

- Reactコンポーネントの`props`は適切に型定義する
- イベントハンドラーには適切なイベント型を使用する（例：`React.MouseEvent`）
- `children`を受け取るコンポーネントには`ReactNode`型を使用する
- カスタムフックの戻り値は配列や複雑なオブジェクトではなく、明確な名前を持つオブジェクトにする

## DOM関連の型定義

- HTML要素の参照には`useRef<HTMLElement>(null)`のように具体的な要素型を指定する
- Canvas操作では`CanvasRenderingContext2D`型を適切に使用する
- ポインターイベントでは`PointerEvent`型を使用する
- SVG要素を操作する場合は`SVGElement`とその派生型を使用する

## コンパイラオプション

- `strict`モードを有効にする
- `noImplicitAny`を有効にして暗黙の`any`型を禁止する
- `strictNullChecks`を有効にしてnull/undefinedのチェックを強制する
- `strictFunctionTypes`を有効にして関数の型チェックを厳密に行う

## 型定義のドキュメント

- 複雑な型定義にはJSDocコメントを追加する
- 各プロパティの意味や制約を説明する
- 使用例があれば記載する
- 型の制約や条件がある場合は明記する 