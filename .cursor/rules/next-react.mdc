---
description: このルールは、Next.jsとReactの使用に関する規約とベストプラクティスを定義します。
globs: src/**/*.{ts,tsx}
alwaysApply: false
---
# Next.js/Reactルール

## コンポーネント設計

- コンポーネントは単一責任の原則に従って設計する
- 大きなコンポーネントは小さな再利用可能なコンポーネントに分割する
- プレゼンテーショナルコンポーネントとコンテナコンポーネントを分離する
- コンポーネントの`props`は明示的に型定義する
- ファイル名は kebab-case.tsx / use-kebab-case.ts で命名する
- テスト可能な処理はコンポーネントから分離して、同階層にテストコード *.test.ts を書く

## Next.js固有のルール

- ページコンポーネントは`src/app`ディレクトリに配置する
- クライアントコンポーネントには必ず`"use client"`ディレクティブを付ける
- サーバーコンポーネントとクライアントコンポーネントを適切に分離する
- 過剰に複雑にならなければクライアントコンポーネントではなくサーバーコンポーネントを使用する
- メタデータはページごとに適切に設定する
- 画像最適化には`next/image`の`Image`コンポーネントを使用する

## Reactフック

- 複雑なステート管理ではReducerパターンを使用する
- React Compiler を使用しているため useCallback や useMemo などのキャッシュ戦略は不要
- サイドエフェクトは`useEffect`内で処理し、依存配列を適切に設定する
  - 可能な限りサイドエフェクトに頼らない設計・実装を優先する
- カスタムフックは`use`プレフィックスで命名する
- React Compilerを活用する場合は適切にlintルールを無視する（`biome-ignore lint/correctness/useExhaustiveDependencies: React Compiler`）

## パフォーマンス最適化

- 不要な再レンダリングを避けるためにステート設計を最適化する
- 大きなリストには仮想化（`react-window`や`react-virtualized`など）を検討する
- 非同期処理の結果を表示する際は適切なローディング状態を提供する
- コードスプリッティングには`dynamic`インポートを活用する
- 頻繁に変更されるデータには適切なキャッシュ戦略を適用する

## アクセシビリティ

- セマンティックなHTML要素を適切に使用する
- インタラクティブな要素には適切なARIAロールと属性を設定する
- キーボードナビゲーションを確保する
- 色のコントラスト比を意識したデザインを実装する
- エラーメッセージは明確で支援技術と互換性のある方法で表示する

## フォルダ構造とインポート

- 機能単位でのフォルダ構成を採用する
- コンポーネントと関連するファイルは同じディレクトリに配置する
- 絶対パスを使用してインポートを簡潔にする（`@/components`など）
- 循環依存を避ける
- 第三者パッケージのインポートはトップレベルで行い、内部インポートとは分離する 