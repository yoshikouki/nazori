---
description: このルールは、プロジェクト全体のコーディング規約とAIの動作に関する指示を定義します。
globs: *
alwaysApply: false
---
# 一般的なコーディングルール

## コードスタイル

- 理由がない限り SOLID の原則を守る
- モジュールを追加するとき、 packages.json にすでに install されていないか確認する
- TypeScriptの型を適切に使用する
- `any`型の使用は避ける

## コメント

- コード中の自明なコメントは避ける
- 関数やクラスにコメントが必要な場合、 Why のコメントを追加する (What はコードを読むと自明なため書かない)
- コメントは英語で記述する
- 明らか推測できる場合、冗長なコメントはしない
  例:```
  ~~// DB name and version~~ ←不要
  static readonly DB_NAME = "nazoriDB";
  static readonly DB_VERSION = 1;
  ```

## 命名規則

- コンポーネント名はパスカルケース（例：`DrawingCanvas`）
- 変数名や関数名はキャメルケース（例：`getContext`）
- 定数は大文字のスネークケース（例：`DEFAULT_COLOR`）
- 型定義名はパスカルケース（例：`LineStyle`）
- ファイル名はケバブケース（例: `kebab-case.tsx` / `use-kebab-case.ts`）
- コンポーネントのコールバック関数は宣言的な`on`プレフィックスを付ける（例：`onPointerDown`）

## 文書スタイル

- ドキュメントは日本語で記述する
- 日本語の文章ではカタカナの語尾に長音を付ける（例：「パラメータ」→「パラメーター」）
- 半角かっこ()ではなく全角かっこ（）を使用する
- 「特に」「様々」などの漢字はひらがなで書く（「とくに」「さまざま」）

## AIへの指示

- コードの提案は実際の実装に即したものにする
- ベストプラクティスに基づいた提案を行う
- パフォーマンスの最適化を意識した提案を行う
- アクセシビリティを考慮した実装を推奨する
- 日本語のUIテキストは簡潔でわかりやすい表現を使用する

## Reactのベストプラクティス

- レンダリングのパフォーマンスを意識したコンポーネント設計
- useRefを使用して不要な再レンダリングを防止
- React Compiler (useリンティング無視コメント)を適切に活用
- クライアントコンポーネントには必ず"use client"ディレクティブを付ける
- コンポーネントは単一責任の原則に従って設計する